// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  AGENT
  CUSTOMER
}

enum Transmission {
  MANUAL
  AUTOMATIC
}

enum FuelType {
  GASOLINE
  DIESEL
  ELECTRIC
  HYBRID
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REJECTED
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  role          Role           @default(CUSTOMER)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bookings      Booking[]
  reviews       Review[]
  carts         Cart[]
  notifications Notification[]

  dateOfBirth     DateTime?
  address         String?
  city            String?
  state           String?
  country         String?
  zipCode         String?
  drivingLicense  String?
  licenseExpiry   DateTime?
  profileImageId  String?
  profileImageUrl String?
}

model Vehicle {
  id                 String              @id @default(uuid())
  name               String              @unique
  make               String
  model              String
  category           String
  transmission       Transmission
  total              Int
  fuelType           FuelType
  pricePerDay        Float
  color              String
  mileage            Int
  images             String
  address            String
  city               String
  postalCode         String
  isAvailable        Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  bookingItems       BookingItem[]
  cartItems          CartItem[]
  reviews            Review[]
  maintenanceRecords MaintenanceRecord[]
}

model MaintenanceRecord {
  id          String    @id @default(cuid())
  vehicleId   String
  description String
  cost        Decimal   @db.Decimal(10, 2)
  serviceDate DateTime
  nextService DateTime?
  createdAt   DateTime  @default(now())

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("maintenance_records")
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId String
  createdAt DateTime @default(now())
}

model Booking {
  id           String        @id @default(uuid())
  user         User?         @relation(fields: [userId], references: [id])
  userId       String?
  guestName    String?
  guestEmail   String?
  guestPhone   String?
  bookingItems BookingItem[]
  status       BookingStatus @default(PENDING)
  totalPrice   Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model BookingItem {
  id        String   @id @default(uuid())
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId String
  startDate DateTime
  endDate   DateTime
  price     Float
  createdAt DateTime @default(now())
}

model Review {
  id            String    @id @default(uuid())
  rating        Int
  comment       String?
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  vehicle       Vehicle   @relation(fields: [vehicleId], references: [id])
  vehicleId     String
  createdAt     DateTime  @default(now())
  adminResponse String?
  respondedAt   DateTime?
  updatedAt     DateTime  @updatedAt
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  code      Int      @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("password_resets")
}

model ContactMessage {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String
  phone     String?
  subject   String
  message   String
  status    String   @default("unread")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_messages")
}

model AuditLog {
  id        String  @id @default(cuid())
  userId    String?
  action    String // CREATE, UPDATE, DELETE, LOGIN, etc.
  entity    String // User, Vehicle, Booking, etc.
  entityId  String?
  oldData   Json?
  newData   Json?
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())

  @@map("audit_logs")
}

model Notification {
  id      String           @id @default(cuid())
  userId  String
  type    NotificationType
  title   String
  message String
  isRead  Boolean          @default(false)
  data    Json? // Additional data for the notification

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  BOOKING_SUBMITTED // Customer submitted a booking request
  BOOKING_APPROVED // Admin approved the booking
  BOOKING_REJECTED // Admin rejected the booking
  BOOKING_CANCELLED // Booking was cancelled
  PICKUP_REMINDER // Reminder for vehicle pickup
  RETURN_REMINDER // Reminder for vehicle return
  VEHICLE_READY // Vehicle is ready for pickup
  MAINTENANCE_DUE // Vehicle maintenance due
  SYSTEM_ALERT // General system alerts
}
